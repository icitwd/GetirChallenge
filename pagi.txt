import React, { useEffect, useState } from "react";
import useItems from "../hooks/use-items";
import ReactPaginate from "react-paginate";

export default function ProductsPagination({ setProducts }) {
  const itemsPerPage = 16;
  const { filteredItems } = useItems();
  const [pageCount, setPageCount] = useState(0);
  const [itemOffset, setItemOffset] = useState(0);

  useEffect(() => {
    const endOffset = itemOffset + itemsPerPage;
    console.log(`Loading items from ${itemOffset} to ${endOffset}`);
    setProducts(filteredItems.slice(itemOffset, endOffset));
    setPageCount(Math.ceil(filteredItems.length / itemsPerPage));
  }, [itemOffset, itemsPerPage]);

  const handlePageChange = (event) => {
    const newOffset = (event.selected * itemsPerPage) % filteredItems.length;
    setItemOffset(newOffset);
  };
  return (
    <>
      <ReactPaginate
        breakLabel="..."
        nextLabel="next >"
        onPageChange={handlePageChange}
        pageRangeDisplayed={4}
        pageCount={pageCount}
        previousLabel="< previous"
        renderOnZeroPageCount={null}
      />
    </>
  );
}



















import React, { useEffect, useState } from "react";
import Pagination from "@mui/material/Pagination";
import useItems from "../hooks/use-items";
export default function ProductsPagination({ setProducts, componentsProps }) {
  const pageSize = 16;
  const [pagination, setPagination] = useState({
    count: 0,
    from: 0,
    to: pageSize,
  });

  const { filteredItems } = useItems();

  const service = {
    getData: ({ from, to }) => {
      return new Promise((resolve, reject) => {
        const data = filteredItems.slice(from, to);
        resolve({
          count: filteredItems.length,
          data: data,
        });
      });
    },
  };
  useEffect(() => {
    service
      .getData({ from: pagination.from, to: pagination.to })
      .then((response) => {
        setPagination({ ...pagination, count: response.count });
        setProducts(response.data);
      });
  }, [pagination.from, pagination.to]);

  const handlePageChange = (event, page) => {
    const from = (page - 1) * pageSize;
    const to = (page - 1) * pageSize + pageSize;
    setPagination({ ...pagination, from: from, to: to });
  };

  return (
    <div className="">
      <Pagination
        count={Math.ceil(pagination.count / pageSize)}
        shape="rounded"
        onChange={handlePageChange}
        color="#1EA4CE"
      />
    </div>
  );
}

